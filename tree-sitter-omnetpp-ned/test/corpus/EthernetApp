==================
EthernetApp.ned
==================

//
// Copyright (C) 2020 OpenSim Ltd.
//
// SPDX-License-Identifier: LGPL-3.0-or-later
//


package inet.applications.ethernet;

import inet.applications.contract.IApp;
import inet.queueing.contract.IActivePacketSource;
import inet.queueing.contract.IPacketFlow;
import inet.queueing.contract.IPassivePacketSink;

//
// This module generates traffic as an Ethernet application. The traffic source
// and traffic sink modules can be built from queueing model elements.
//
module EthernetApp like IApp
{
    parameters:
        string interfaceTableModule; // Relative module path of the interface table
        *.interfaceTableModule = default(absPath(this.interfaceTableModule));
        @application;
        @display("i=block/app");
    gates:
        input socketIn;
        output socketOut;
    submodules:
        source: <default("ActivePacketSource")> like IActivePacketSource if typename != "" {
            parameters:
                @display("p=200,150");
        }
        tagger: <default("")> like IPacketFlow {
            parameters:
                @display("p=200,300");
        }
        measurementStarter: <default("")> like IPacketFlow {
            parameters:
                @display("p=200,450");
        }
        sink: <default("PassivePacketSink")> like IPassivePacketSink if typename != "" {
            parameters:
                @display("p=500,150");
        }
        measurementRecorder: <default("")> like IPacketFlow {
            parameters:
                @display("p=500,450");
        }
        io: EthernetSocketIo {
            parameters:
                @display("p=400,600");
        }
    connections allowunconnected:
        source.out --> tagger.in if exists(source);
        tagger.out --> measurementStarter.in;
        measurementStarter.out --> io.trafficIn;
        io.socketOut --> socketOut;

        socketIn --> io.socketIn;
        io.trafficOut --> measurementRecorder.in;
        measurementRecorder.out --> sink.in if exists(sink);
}

---

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (definition
    (package_decl
      (qname
        (identifier)
        (identifier)
        (identifier))))
  (definition
    (import
      (import_qname
        (identifier)
        (identifier)
        (identifier)
        (import_un_qname
          (identifier)))))
  (definition
    (import
      (import_qname
        (identifier)
        (identifier)
        (identifier)
        (import_un_qname
          (identifier)))))
  (definition
    (import
      (import_qname
        (identifier)
        (identifier)
        (identifier)
        (import_un_qname
          (identifier)))))
  (definition
    (import
      (import_qname
        (identifier)
        (identifier)
        (identifier)
        (import_un_qname
          (identifier)))))
  (comment)
  (comment)
  (comment)
  (comment)
  (definition
    (module_definition
      (name)
      (like_name)
      (paramblock
        (params
          (params
            (params
              (params
                (paramsitem
                  (param
                    (param_typenamevalue
                      (param_typename
                        (paramtype)
                        (identifier))))))
              (comment)
              (paramsitem
                (param
                  (pattern_value
                    (pattern
                      (pattern2
                        (pattern_elem
                          (pattern_name)))
                      (pattern_elem
                        (pattern_name
                          (identifier))))
                    (paramvalue
                      (expression
                        (expression
                          (dottedname
                            (identifier)))
                        (expression
                          (dottedname
                            (dottedname
                              (identifier))
                            (identifier)))))))))
            (paramsitem
              (inline_properties
                (property
                  (name)))))
          (paramsitem
            (inline_properties
              (property
                (name)
                (property_key))))))
      (gate_block
        (gate
          (identifier)
          (identifier))
        (gate
          (identifier)
          (identifier)))
      (submodules_block
        (submodule
          (submoduleheader
            (submodulename
              (identifier))
            (likeexpr
              (expression
                (string_constant)))
            (dottedname
              (identifier))
            (condition
              (expression
                (dottedname
                  (identifier)))
              (operator)
              (expression
                (string_constant))))
          (paramblock
            (params
              (paramsitem
                (inline_properties
                  (property
                    (name)
                    (property_key)))))))
        (submodule
          (submoduleheader
            (submodulename
              (identifier))
            (likeexpr
              (expression
                (string_constant)))
            (dottedname
              (identifier)))
          (paramblock
            (params
              (paramsitem
                (inline_properties
                  (property
                    (name)
                    (property_key)))))))
        (submodule
          (submoduleheader
            (submodulename
              (identifier))
            (likeexpr
              (expression
                (string_constant)))
            (dottedname
              (identifier)))
          (paramblock
            (params
              (paramsitem
                (inline_properties
                  (property
                    (name)
                    (property_key)))))))
        (submodule
          (submoduleheader
            (submodulename
              (identifier))
            (likeexpr
              (expression
                (string_constant)))
            (dottedname
              (identifier))
            (condition
              (expression
                (dottedname
                  (identifier)))
              (operator)
              (expression
                (string_constant))))
          (paramblock
            (params
              (paramsitem
                (inline_properties
                  (property
                    (name)
                    (property_key)))))))
        (submodule
          (submoduleheader
            (submodulename
              (identifier))
            (likeexpr
              (expression
                (string_constant)))
            (dottedname
              (identifier)))
          (paramblock
            (params
              (paramsitem
                (inline_properties
                  (property
                    (name)
                    (property_key)))))))
        (submodule
          (submoduleheader
            (submodulename
              (identifier))
            (dottedname
              (identifier)))
          (paramblock
            (params
              (paramsitem
                (inline_properties
                  (property
                    (name)
                    (property_key))))))))
      (connections_block
        (connection
          (dottedname
            (dottedname
              (identifier))
            (identifier))
          (dottedname
            (dottedname
              (identifier))
            (identifier))
          (condition
            (expression
              (expression
                (dottedname
                  (identifier)))
              (expression
                (dottedname
                  (identifier))))))
        (connection
          (dottedname
            (dottedname
              (identifier))
            (identifier))
          (dottedname
            (dottedname
              (identifier))
            (identifier)))
        (connection
          (dottedname
            (dottedname
              (identifier))
            (identifier))
          (dottedname
            (dottedname
              (identifier))
            (identifier)))
        (connection
          (dottedname
            (dottedname
              (identifier))
            (identifier))
          (dottedname
            (identifier)))
        (connection
          (dottedname
            (identifier))
          (dottedname
            (dottedname
              (identifier))
            (identifier)))
        (connection
          (dottedname
            (dottedname
              (identifier))
            (identifier))
          (dottedname
            (dottedname
              (identifier))
            (identifier)))
        (connection
          (dottedname
            (dottedname
              (identifier))
            (identifier))
          (dottedname
            (dottedname
              (identifier))
            (identifier))
          (condition
            (expression
              (expression
                (dottedname
                  (identifier)))
              (expression
                (dottedname
                  (identifier))))))))))
